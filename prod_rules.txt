0: IotaProg' -> IotaProg
1: IotaProg -> Rules
2: IotaProg -> Rule
3: Rules -> rules string_literal ZeroOrMoreDecls OneOrMoreRules end
4: OneOrMoreRules -> Rule
5: OneOrMoreRules -> Rules
6: OneOrMoreRules -> Rule OneOrMoreRules
7: OneOrMoreRules -> Rules OneOrMoreRules
8: Rule -> rule string_literal ZeroOrMoreDecls EventHandler ; OneOrMorePredicateActions end
9: ZeroOrMoreDecls -> 
10: ZeroOrMoreDecls -> Decl ZeroOrMoreDecls
11: Decl -> device identifier : identifier ;
12: Decl -> device identifier : identifier . identifier ;
13: Decl -> timer identifier ;
14: Decl -> input identifier : identifier ;
15: Decl -> output identifier : identifier ;
16: Decl -> output identifier : ( OneOrMoreIdentifiers ) ;
17: OneOrMoreIdentifiers -> identifier
18: OneOrMoreIdentifiers -> identifier , OneOrMoreIdentifiers
19: EventHandler -> FieldOrTimer [ . ~> ]
20: EventHandler -> FieldOrTimer [ . ~> Constant ]
21: EventHandler -> FieldOrTimer [ Constant ~> ]
22: EventHandler -> FieldOrTimer [ Constant ~> Constant ]
23: EventHandler -> any Group ( identifier -> EventHandler )
24: OneOrMorePredicateActions -> Predicate ; Actions
25: OneOrMorePredicateActions -> Predicate ; Actions | OneOrMorePredicateActions
26: Predicate -> OrPred
27: Predicate -> all Group ( identifier -> Predicate )
28: Predicate -> exists Group ( identifier -> Predicate )
29: OrPred -> OrPred || AndPred
30: OrPred -> AndPred
31: AndPred -> AndPred && EqNeqPred
32: AndPred -> EqNeqPred
33: EqNeqPred -> EqNeqPred == CompExpr
34: EqNeqPred -> EqNeqPred != CompExpr
35: EqNeqPred -> CompExpr
36: CompExpr -> CompExpr < AdditiveExpr
37: CompExpr -> CompExpr <= AdditiveExpr
38: CompExpr -> CompExpr > AdditiveExpr
39: CompExpr -> CompExpr >= AdditiveExpr
40: CompExpr -> AdditiveExpr
41: AdditiveExpr -> AdditiveExpr + MultiplicativeExpr
42: AdditiveExpr -> AdditiveExpr - MultiplicativeExpr
43: AdditiveExpr -> MultiplicativeExpr
44: MultiplicativeExpr -> MultiplicativeExpr * UnaryExpr
45: MultiplicativeExpr -> MultiplicativeExpr / UnaryExpr
46: MultiplicativeExpr -> UnaryExpr
47: UnaryExpr -> - PrimaryExpr
48: UnaryExpr -> ~ PrimaryExpr
49: UnaryExpr -> PrimaryExpr
50: PrimaryExpr -> true
51: PrimaryExpr -> false
52: PrimaryExpr -> number_literal
53: PrimaryExpr -> string_literal
54: PrimaryExpr -> identifier
55: PrimaryExpr -> identifier . identifier
56: PrimaryExpr -> ( Predicate )
57: Constant -> identifier
58: Constant -> number_literal
59: Actions -> 
60: Actions -> OneOrMoreActions
61: OneOrMoreActions -> Action
62: OneOrMoreActions -> Action , OneOrMoreActions
63: Action -> FieldOrTimer := AdditiveExpr
64: Action -> identifier ( OneOrMoreAdditiveExprs )
65: Action -> start identifier at AdditiveExpr
66: Action -> stop identifier
67: Action -> tick identifier
68: Action -> map Group ( identifier -> Action )
69: OneOrMoreAdditiveExprs -> AdditiveExpr
70: OneOrMoreAdditiveExprs -> AdditiveExpr , OneOrMoreAdditiveExprs
71: FieldOrTimer -> identifier
72: FieldOrTimer -> identifier . identifier
73: Group -> identifier
74: Group -> { zero_or_more_device_identifiers }
75: zero_or_more_device_identifiers -> 
76: zero_or_more_device_identifiers -> one_or_more_device_identifiers
77: one_or_more_device_identifiers -> identifier
78: one_or_more_device_identifiers -> identifier , one_or_more_device_identifiers
