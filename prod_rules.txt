0: IotaProg' -> IotaProg
1: IotaProg -> Rules
2: IotaProg -> Rule
3: Rules -> rules string_literal ZeroOrMoreDeviceOrInput OneOrMoreRules end
4: OneOrMoreRules -> Rule
5: OneOrMoreRules -> Rule OneOrMoreRules
6: Rule -> rule string_literal ZeroOrMoreDecl EventHandler ; OneOrMorePredicateActions end
7: ZeroOrMoreDecl -> 
8: ZeroOrMoreDecl -> Decl ZeroOrMoreDecl
9: Decl -> device identifier : identifier ;
10: Decl -> input identifier : identifier ;
11: Decl -> output identifier : identifier ;
12: Decl -> output identifier : ( OneOrMoreIdentifiers ) ;
13: OneOrMoreIdentifiers -> identifier
14: OneOrMoreIdentifiers -> identifier , OneOrMoreIdentifiers
15: EventHandler -> FieldOrTimer [ . ~> ]
16: EventHandler -> FieldOrTimer [ . ~> Constant ]
17: EventHandler -> FieldOrTimer [ Constant ~> ]
18: EventHandler -> FieldOrTimer [ Constant ~> Constant ]
19: EventHandler -> any Group ( identifier -> EventHandler )
20: OneOrMorePredicateActions -> Predicate ; Actions
21: OneOrMorePredicateActions -> Predicate ; Actions | OneOrMorePredicateActions
22: Predicate -> OrPred
23: Predicate -> all Group ( identifier -> Predicate )
24: Predicate -> exists Group ( identifier -> Predicate )
25: OrPred -> OrPred || AndPred
26: OrPred -> AndPred
27: AndPred -> AndPred && EqNeqPred
28: AndPred -> EqNeqPred
29: EqNeqPred -> EqNeqPred == CompExpr
30: EqNeqPred -> EqNeqPred != CompExpr
31: EqNeqPred -> CompExpr
32: CompExpr -> CompExpr < AdditiveExpr
33: CompExpr -> CompExpr <= AdditiveExpr
34: CompExpr -> CompExpr > AdditiveExpr
35: CompExpr -> CompExpr >= AdditiveExpr
36: CompExpr -> AdditiveExpr
37: AdditiveExpr -> AdditiveExpr + MultiplicativeExpr
38: AdditiveExpr -> AdditiveExpr - MultiplicativeExpr
39: AdditiveExpr -> MultiplicativeExpr
40: MultiplicativeExpr -> MultiplicativeExpr * UnaryExpr
41: MultiplicativeExpr -> MultiplicativeExpr / UnaryExpr
42: MultiplicativeExpr -> UnaryExpr
43: UnaryExpr -> - PrimaryExpr
44: UnaryExpr -> ~ PrimaryExpr
45: UnaryExpr -> PrimaryExpr
46: PrimaryExpr -> true
47: PrimaryExpr -> false
48: PrimaryExpr -> number_literal
49: PrimaryExpr -> string_literal
50: PrimaryExpr -> FieldOrTimer
51: PrimaryExpr -> ( Predicate )
52: Constant -> identifier
53: Constant -> number_literal
54: Actions -> 
55: Actions -> OneOrMoreActions
56: OneOrMoreActions -> Action
57: OneOrMoreActions -> Action , OneOrMoreActions
58: Action -> FieldOrTimer := AdditiveExpr
59: Action -> FieldOrTimer := ( OneOrMoreAdditiveExprs )
60: Action -> start identifier at AdditiveExpr
61: Action -> stop identifier
62: Action -> map Group ( identifier -> Action )
63: OneOrMoreAdditiveExprs -> AdditiveExpr
64: OneOrMoreAdditiveExprs -> AdditiveExpr , OneOrMoreAdditiveExprs
65: FieldOrTimer -> identifier
66: FieldOrTimer -> identifier . identifier
67: Group -> identifier
68: Group -> { zero_or_more_device_identifiers }
69: zero_or_more_device_identifiers -> 
70: zero_or_more_device_identifiers -> one_or_more_device_identifiers
71: one_or_more_device_identifiers -> identifier
72: one_or_more_device_identifiers -> identifier , one_or_more_device_identifiers
